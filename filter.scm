(define (filter predicate seq)
	(cond ((null? seq) '())
	((predicate (car seq)) (cons (car seq) (filter predicate (cdr seq))))
	(else (filter predicate (cdr seq)))))
(define (acc op init seq)
	(if (null? seq) init (op (car seq) (acc op init (cdr seq)))))
(define (enumerate-interval low upper)
	(if (> low upper) '() (cons low ( enumerate-interval (+ low 1) upper))))
(define (enumerate-tree tree)
	(cond((null? tree) '())
	((not(pair? tree)) (list tree))
	(else (append (enumerate-tree (car tree)) (enumerate-tree (cdr tree))))))


(define (sum-odd-squares tree)
	(acc + 0  (map square (filter odd? (enumerate-tree tree)))))
(define (even-fibs n)
	(acc cons '() (map fib (filter even? (enumerate-interval 1 n)))))
(load "fib")
(define (list-fib-squares n)
	(acc  cons '()  (map square ( map fib (enumerate-interval 1 n)))))

(define (product-of-squares-of-odd-elements seq)
	(acc * 1 (map square (filter odd? (enumerate-tree seq)))))
