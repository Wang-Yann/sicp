(load "attach-tag-2.scm")
(load "put+get.scm")
(load "polynomial-term.scm")
(define (install-polynomial-package)
	(define (make-poly variable term-list)
		(cons variable term-list))
	(define (variable p) (car p))
	(define (term-list p) (cdr p))
	(define (variable? x) (symbol? x))
    (define (same-variable? x y) (and (variable? x) (variable? y) (eq? x y)))
	(define (add-poly p1 p2)
		(if (same-variable? (variable p1) (variable p2))
			(make-poly (variable p1) (add-terms (term-list p1) (term-list p2)))
		(error "Poly not in same var" (list p1 p2))))
	(define (mul-poly p1 p2)
		(if (same-variable? (variable p1) (variable p2))
			(make-poly (variable p1) (mul-terms (term-list p1) (term-list p2)))
		(error "Poly not in same var" (list p1 p2))))
   (define (div-poly poly1 poly2) 
   		(if (same-variable? (variable poly1) (variable poly2)) 
     		(make-poly (variable poly1)	(div-terms (term-list poly1) 
                  (term-list poly2))) 
     	(error "not the same variable" (list poly1 poly2)))) 	;2-91++++
	;;interface to rest of the system
	(define (tag x) (attach-tag 'polynomial x))
	(define (zero-poly? poly)(empty-termlist? (term-list poly))) 
   	 (put '=zero? '(polynomial)   zero-poly? ) 
	(put 'add '(polynomial polynomial) (lambda(x y) (tag (add-poly x y))))
	(put 'mul '(polynomial polynomial) (lambda (x y) (tag (mul-poly x y))))
	(put 'negate '(polynomial) 
          (lambda (poly) (tag (make-poly (variable poly) 
                                          (negate-terms (term-list poly)))))) ;2-88+++
	 (put 'sub '(polynomial polynomial)      ;2-88++++ 
		 (lambda (x y) (tag ( add-poly x (make-poly (variable y) (negate-terms (term-list y)))))))
	 (put 'div '(polynomial polynomial) (lambda (x y) 
			(tag (div-poly x y))))
	 (put 'make 'polynomial (lambda(var terms) (tag (make-poly var terms))))
'done)	

(define (make-polynomial var terms) 	
	((get 'make 'polynomial) var terms))
