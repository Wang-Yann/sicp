(define (adjoin-term term term-list)
	(if (=  (coeff term) 0 ) term-list (cons term term-list)));=zero?
(define (the-empty-list) '())
(define (first-term term-list) (car term-list))
(define (rest-terms term-list) (cdr term-list))
(define (empty-termlist? lst) (null? lst))

(define (make-term order coeff) (list order coeff))
(define (order term) (car term))
(define (coeff term) (cadr term))
(define (add-terms p1 p2)
       (cond ((empty-termlist? p1) p2)
             ((empty-termlist? p2) p1)
             (else (let((t1 (first-term p1)) (t2 (first-term p2)))
                   (cond ((> (order t1) (order t2))
                               (adjoin-term t1 (add-terms (rest-terms p1) p2)))
                         ((< (order t1) (order t2))
                              (adjoin-term t2 (add-terms p1 (rest-terms p2))))
                        ((= (order p1) (order p2))
                              (adjoin-term (make-term (order t1) (+ (coeff t1) (coeff t2)));add
                                  (add-terms (rest-terms p1) (rest-terms p2)))))))))
(define (mul-terms L1 L2)
	(if (empty-termlist? L1) (the-empty-list)
		(add-terms (mul-term-by-all-terms (first-term L1) L2)
				   (mul-terms (rest-terms L1) L2))))
(define (mul-term-by-all-terms x L)
	(if (empty-termlist? L) (the-empty-list)
		(let (( y (first-term L)))
			 (adjoin-term (make-term (+ (order x) (order y)) (mul (coeff x) (coeff y)))
						 (mul-term-by-all-terms x (rest-terms L))))))
