(load "settree.scm")
(define (list->tree lst)
	(car (partial-tree lst (length lst))))
(define (partial-tree lst n)
	(if (= n 0) (cons '() lst)
		(let((left-size (quotient (- n 1) 2)))
			(let((left-result (partial-tree lst left-size)))
				(let((left-tree (car left-result))
					(non-left-lst (cdr left-result))
					(right-size (- n (+ left-size 1))))
					(let((this-entry (car non-left-lst))
						(right-result (partial-tree (cdr non-left-lst) right-size)))
						(let ((right-tree (car right-result))
							(remaininglst (cdr right-result)))
							(cons (make-tree this-entry left-tree right-tree) 
										remaininglst))))))))
