(load "interval.scm")
(define (add-interval x y)
	(make-interval (+( lower-bound x) (lower-bound y))
			(+ (upper-bound x) (upper-bound y))))
(define (mul-interval x y)
	(let ((p1 (*( lower-bound x) (lower-bound y)))
		(p2 (*( lower-bound x) (upper-bound y)))
		(p3 (*( upper-bound x) (lower-bound y)))	
		(p4 (*( upper-bound x) (upper-bound y))))
	(make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))))
(define (div-interval x y)
	(if (test? y) (mul-interval x (make-interval (/ 1.0 (upper-bound y))
			(/ 1.0 (lower-bound y))))  (error "div 0")))
(define (sub-interval x y) 
	(let ((p1 (-( lower-bound x) (lower-bound y)))
                (p2 (-( lower-bound x) (upper-bound y)))
                (p3 (-( upper-bound x) (lower-bound y)))        
                (p4 (-( upper-bound x) (upper-bound y))))
        (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))))
(define A (make-interval 3.1 3.25))
(define B (make-interval 11 12.12))
(define (test? x)  (> (* (lower-bound x) (upper-bound x)) 0 ))


(define (par1 r1 r2) (div-interval (mul-interval r1 r2) (add-interval r1 r2)))
(define (par2 r1 r2) (let ((one (make-interval 1 1)))
	 (div-interval one (add-interval (div-interval one r1) (div-interval one r2)))))

