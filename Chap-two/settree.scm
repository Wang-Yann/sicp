(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree e l r) (list e l r))
(define (element-of-set? x set)
	(cond ((null? set) #f)
		((= x (entry set)) #t)
		((> x (entry set)) (element-of-set? x (right-branch set)))
		((< x (entry set)) (element-of-set? x (left-branch set)))
		(else (error "wrong type"))))
(define (adjoin x set)
	(cond ((null? set) (make-tree x '() '()))
		((element-of-set? x set) set)
		(else (let (( root (entry set)))
			(if (< x root) (make-tree root (adjoin x (left-branch set)) (right-branch set))
				(make-tree root (left-branch set) (adjoin x (right-branch set))))))))

(define d (make-tree 20 '() '()))
(define c (make-tree 7 '() '()))
(define a (make-tree 1 '() '()))
(define b (make-tree 5 a c))
(define e (make-tree 11 b d))
