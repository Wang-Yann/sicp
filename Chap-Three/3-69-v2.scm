(load "3-5-3.scm")                                                                                   
 (define (merge-weighted s1 s2 weight)
     (cond ((stream-null? s1) s2)
           ((stream-null? s2) s1)
           (else (let ((cars1 (stream-car s1)) (cars2 (stream-car s2)))
                 (cond ((< (weight cars1) (weight cars2))
                          (cons-stream cars1  (merge-weighted (stream-cdr s1) s2 weight)))
                       ((= (weight cars1) (weight cars2))
                          (cons-stream cars1  (merge-weighted (stream-cdr s1) s2 weight)))
                       (else (cons-stream cars2 (merge-weighted s1 (stream-cdr s2) weight))))))))
 
 (define (weighted-pairs s1 s2 weight)
     (cons-stream (list (stream-car s1) (stream-car s2))
        (merge-weighted (stream-map (lambda (x) (list (stream-car s1) x)) (stream-cdr s2))
                        (weighted-pairs (stream-cdr s1) (stream-cdr s2) weight)
                        weight)))
 
 (define weight1 (lambda (x) (+ (square (car x)) (square (cadr x)))))
 (define pairs1 (weighted-pairs integers integers weight1))
(define (sqrt? x) (= (square (round (sqrt x))) x))

(define (gougu s) 
          (let ((scar (stream-car s))) 
             (if (sqrt? (weight1 scar))   
                (cons-stream (cons  (sqrt (weight1 scar)) scar )  (gougu (stream-cdr s))) 
                         (gougu (stream-cdr s)))) )
(define gougu-numbers 
        (gougu (weighted-pairs integers integers weight1)))
 
;;(display-stream (stream-section gougu-numbers 0 60))
