(define (make-wire)
	(let ((signal-value 0) (action-procedure '()))
		(define (set-my-signal! new-value)
			(if (not (= signal-value new-value)) 
				(begin (set! signal-value new-value)
						(call-each action-procedure))
		'done))
		(define (accept-action-procedure! proc)
			(set! action-procedure (cons proc action-procedure)) (proc))
		(define (dispatch m)
			(cond ((eq? m 'get-signal) signal-value)
				  ((eq? m 'set-my-signal! ) set-my-signal!)
				  ((eq? m 'add-action!) accept-action-procedure!)
				  (else (error "Unknown operation---wire" m ))))
dispatch))	
(define (call-each procedure)
	(if (null? procedure) 'done (begin ((car procedure)) (call-each (cdr procedure)))))
(define (get-signal wire) (wire 'get-signal))
(define (set-signal! wire new-value) ((wire 'set-my-signal!) new-value))
(define (add-action! wire action-procedure) ((wire 'add-action! ) action-procedure))

