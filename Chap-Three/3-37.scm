(load "probe-connector.scm")
(load "constraint.scm")
(load "make-connector.scm")

(define (c+ x y)
	(let ((z (make-connector)))
		(adder x y z)
		z))
(define (c- x y)
	(let((z (make-connector)))
		(adder y z x)
		z))
(define (c* x y)
	(let ((z (make-connector)))
		(multiplier x y z)
		z))
(define (cv x)
	(let ((z (make-connector)))
	(constant x z) 
	z))
(define (c/ x y)
	(let ((z (make-connector)))
		(multiplier z  y x)
	z))

(define (C-F-converter x)
	 ( c+ (c* (c/ (cv 9) (cv 5))
			 x)
		 (cv 32)))
(define C (make-connector))
(define F (C-F-converter C))
(probe " C temp" C)
(probe "F temp" F)
