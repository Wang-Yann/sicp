;(define (has-circle? lst)
;	(define (iter x y)
;	(let ((walk-f (cddr x))(walk-s (cdr y)))
;		(cond ((or (null? walk-f) (null? walk-s)) #f)
;				((eq? walk-f walk-s) #t)
;				(else (iter walk-f walk-s)))))
;	(iter lst lst))   ;;;;;;两步余一不完
(define (loop? lst)
	(define (iter x y)
		(let ((x-walk (list-walk 1 x)) (y-walk (list-walk 2 y)))
		(cond ((or (null? x-walk) (null? y-walk)) #f)
				((eq? x-walk y-walk) #t)
				(else (iter x-walk y-walk)))))
(iter lst lst))

(define (list-walk step lst)
	(cond ((null? lst) '())
		((= step 0) lst)
		(else (list-walk (- step 1) (cdr lst)))))
