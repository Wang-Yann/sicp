(load "make-wire.scm")
(load "make-agenda.scm")
(load "propagate.scm")
(define the-agenda (make-agenda))
(define inverter-delay 2)
(define and-gate-delay 3)
(define or-gate-delay 5)

(define a (make-wire))
(define b (make-wire))
(define c (make-wire))
(define d (make-wire))
(define e (make-wire))
(define s (make-wire))

(define (half-adder a b s c)
    (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
'ok))

(define (full-adder a b c-in sum c-out)
    (let ((c1 (make-wire)) (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))
(define (inverter input output)
    (define (invert-input)
        (let ((new-value (logical-not (get-signal input))))
            (after-delay inverter-delay
             (lambda() (set-signal! output new-value)))))
    (add-action! input invert-input)
    'ok)
(define (logical-not s)
    (cond ((= s 0) 1)
          ((= s 1) 0)
          (else (error "Invalid signal" s))))
(define (and-gate a1 a2 output)
    (define (and-action-procedure)
        (let((new-value (logical-and (get-signal a1) (get-signal a2))))
            (after-delay and-gate-delay
              (lambda() (set-signal! output new-value)))))
    (add-action! a1 and-action-procedure)
    (add-action! a2 and-action-procedure)
    'ok)
(define (logical-and a1 a2)
    (if (and (= a1 1) (= a2 1)) 1 0))
(define (or-gate a1 a2 output)
	(define (or-action-procedure)
		(let ((new-value (logical-or (get-signal a1) (get-signal a2))))
			(after-delay or-gate-delay 
			 (lambda() (set-signal! output new-value)))))
	(add-action! a1 or-action-procedure)
	(add-action! a2 or-action-procedure)
	'ok)
(define (logical-or a1 a2) (if (or (= a1 1) (= a2 1)) 1 0))


 (define input-1 (make-wire))
 (define input-2 (make-wire))
 (define sum (make-wire))
 (define carry (make-wire))
 (define output (make-wire))
 (probe 'sum sum)
 (probe 'carry carry)
; (half-adder input-1 input-2 sum carry)
