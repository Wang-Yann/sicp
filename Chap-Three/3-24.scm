(define (make-table same-key?)
	(let((local-table (list '*table*)))
	(define (lookup key)
		(let ((record (assoc key (cdr local-table))))
			(if record (cdr record) #f)))
;	(define (same-key? k1 k2) (< (- k1 k2) 0.01))
	(define (assoc key records)
		(cond ((null? records) #f)
		  ((same-key?  key (caar records)) (car records))
		  (else (assoc key (cdr records)))))
	(define (insert! key value )
		(let((record (assoc key (cdr local-table))))
			(if record (set-cdr! record value)
					(set-cdr! local-table
							 (cons (cons key value) (cdr local-table))))))
	(define (dispatch m)
		(cond ((eq? m  'lookup) lookup)
			  ((eq? m  'insert) insert!)
			  (else (error "unknown command" m))))
dispatch))
(define N (make-table  = ))
