(load "filter.scm")
(define (queens board-size)
	(define (queen-cols k)
		(if (= k 0)
		(list emptyboard)
		(filter (lambda (position) (safe? k position ))
		  (flatmap
	            (lambda (rest-of-queens)
			(map (lambda (new-row) (adjoin-position new-row k rest-of-queens))
		    (enumerate-interval 1 board-size)))
		  (queen-cols (- k 1))))))
	(queen-cols board-size))
(define (flatmap proc seq) (acc append '() (map proc seq)))
(define emptyboard '() )
(define (adjoin-position new-row k rest-of-queens)
	  (cons new-row rest-of-queens ))
(define (safe? k position)
	(iter-check (car position) (cdr position) 1))
(define (iter-check row-of-new-queen rest-of-queens i)
	(if (null?  rest-of-queens) #t	
	  (let ((currentrow (car rest-of-queens)))
		(if (or (=  row-of-new-queen currentrow )
		    (= row-of-new-queen (+ i currentrow))
		    (= row-of-new-queen (- currentrow i) ))
	            #f
	(iter-check row-of-new-queen (cdr rest-of-queens) (+ i 1))))))
